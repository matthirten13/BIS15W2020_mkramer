install.packages("jpeg")
sum(5-3)*2 #Example 1
prod(8/2)**2 #Example 2
pi <- 3.14159265359
class(pi) #Returns numeric, so pi is numeric
blackjack <- c(140, -20, 70, -120, 240, NA, NA)
roulette <- c(60, 50, 120, -300, 10, NA, NA)
days <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday")
names(blackjack) <- days
names(roulette) <- days
sum(blackjack, na.rm = TRUE)
sum(blackjack, na.rm = TRUE) #My interpretation is that I won 310 in blackjack over the course of the week. I probably need to go less often as my gambling problem is pretty bad if I'm going 5x a week.
sum(roulette, na.rm = TRUE)
total_week <- blackjack + roulette
if(sum(blackjack, na.rm = TRUE)>sum(roulette, na.rm = TRUE)) print("Blackjack")  else print("Roulette") #stick to Blackjack
## Push your final code to [GitHub](https://github.com/FRS417-DataScienceBiologists)
?class
Philosophers_Stone <- c(317.5, 657.1)
Chamber_of_Secrets <- c(261.9, 616.9)
Prisoner_of_Azkaban <- c(249.5, 547.1)
Goblet_of_Fire <- c(290.0, 606.8)
Order_of_the_Phoenix <- c(292.0, 647.8)
Half_Blood_Prince <- c(301.9, 632.4)
Deathly_Hallows_1 <- c(295.9, 664.3)
Deathly_Hallows_2 <- c(381.0, 960.5)
box_office <- c(Philosophers_Stone, Chamber_of_Secrets, Prisoner_of_Azkaban, Goblet_of_Fire, Order_of_the_Phoenix, Half_Blood_Prince, Deathly_Hallows_1, Deathly_Hallows_2)
box_office
harry_potter_matrix <- matrix(box_office, nrow = 8, byrow = T)
harry_potter_matrix
region <- c("US", "non-US")
titles <- c("Philosophers_Stone", "Chamber_of_Secrets", "Prisoner_of_Azkaban", "Goblet_of_Fire", "Order_of_the_Phoenix", "Half_Blood_Prince", "Deathly_Hallows_1", "Deathly_Hallows_2")
colnames(harry_potter_matrix) <- region
rownames(harry_potter_matrix) <- titles
harry_potter_matrix
global <- rowSums(harry_potter_matrix)
global
all_harry_potter_matrix <- cbind(harry_potter_matrix, global)
all_harry_potter_matrix
all_harry_potter_matrix <- cbind(harry_potter_matrix, Global)
Global <- rowSums(harry_potter_matrix)
Global
region <- c("US", "Non-US")
titles <- c("Philosophers_Stone", "Chamber_of_Secrets", "Prisoner_of_Azkaban", "Goblet_of_Fire", "Order_of_the_Phoenix", "Half_Blood_Prince", "Deathly_Hallows_1", "Deathly_Hallows_2")
colnames(harry_potter_matrix) <- region
rownames(harry_potter_matrix) <- titles
harry_potter_matrix
Global <- rowSums(harry_potter_matrix)
Global
all_harry_potter_matrix <- cbind(harry_potter_matrix, Global)
all_harry_potter_matrix
Total <- colSums(all_harry_potter_matrix)
all_harry_potter_matrix
Total <- colSums(all_harry_potter_matrix)
Total
HPwTot <- rbind(all_harry_potter_matrix, Total)
HPwTot <- rbind(all_harry_potter_matrix, Total)
HPwTot
all_harry_potter_matrix[1,2]
all_harry_potter_matrix[1:4]
non_us_earnings <- all_harry_potter_matrix[ ,2]
mean(non_us_earnings)
spring_1 <- c(36.25, 35.40, 35.30)
spring_2 <- c(35.15, 35.35, 33.35)
spring_3 <- c(30.70, 29.65, 29.20)
spring_4 <- c(39.70, 40.05, 38.65)
spring_5 <- c(31.85, 31.40, 29.30)
spring_6 <- c(30.20, 30.65, 29.75)
spring_7 <- c(32.90, 32.50, 32.80)
spring_8 <- c(36.80, 36.45, 33.15)
HS <- C(spring_1, spring_2, spring_3, spring_4, spring_5, spring_6, spring_7, spring_8)
spring_1 <- c(36.25, 35.40, 35.30)
spring_2 <- c(35.15, 35.35, 33.35)
spring_3 <- c(30.70, 29.65, 29.20)
spring_4 <- c(39.70, 40.05, 38.65)
spring_5 <- c(31.85, 31.40, 29.30)
spring_6 <- c(30.20, 30.65, 29.75)
spring_7 <- c(32.90, 32.50, 32.80)
spring_8 <- c(36.80, 36.45, 33.15)
HS <- C(spring_1, spring_2, spring_3, spring_4, spring_5, spring_6, spring_7, spring_8)
HS <- C(spring_1, spring_2, spring_3, spring_4, spring_5, spring_6, spring_7, spring_8)
HS <- C(spring_1, spring_2, spring_3, spring_4, spring_5, spring_6, spring_7, spring_8)
HS <- C(spring_1, spring_2, spring_3, spring_4, spring_5, spring_6, spring_7, spring_8)
spring_1 <- c(36.25, 35.40, 35.30)
spring_2 <- c(35.15, 35.35, 33.35)
spring_3 <- c(30.70, 29.65, 29.20)
spring_4 <- c(39.70, 40.05, 38.65)
spring_5 <- c(31.85, 31.40, 29.30)
spring_6 <- c(30.20, 30.65, 29.75)
spring_7 <- c(32.90, 32.50, 32.80)
spring_8 <- c(36.80, 36.45, 33.15)
HS <- c(spring_1, spring_2, spring_3, spring_4, spring_5, spring_6, spring_7, spring_8)
HS
HS <- c(spring_1, spring_2, spring_3, spring_4, spring_5, spring_6, spring_7, spring_8)
HS_M <- matrix(HS, nrow = 3, byrow = T)
HS_M
HS <- c(spring_1, spring_2, spring_3, spring_4, spring_5, spring_6, spring_7, spring_8)
HS_M <- matrix(HS, nrow = 8, byrow = T)
HS_M
scientists <- c("Jill", "Steve", "Susan")
springs <- c("Bluebell Spring", "Opal Spring", "Riverside Spring", "Too Hot Spring", "Mystery Spring", "Emerald Spring", "Black Spring", "Pearl Spring")
colnames(HS_M) <- scientists
rownames(HS_M) <- springs
colnames(HS_M) <- scientists
rownames(HS_M) <- springs
HS_M
mean_vector <- rowMeans(springs_matrix)
mean_vector <- rowMeans(HS_M)
mean_vector
Avg_Temp <- rowMeans(HS_M)
Avg_Temp
HS_MwM <- cbind(HS_M, Avg_Temp)
HS_MwM <- cbind(HS_M, Avg_Temp)
HS_MwM
?round
## That's it, let's take a break!
Avg_Temp <- rowMeans(HS_M, digits = 4)
Avg_Temp <- rowMeans(HS_M, ceiling = 4)
Avg_Temp <- round(rowMeans(HS_M), digits = 4)
Avg_Temp
Avg_Temp <- round(rowMeans(HS_M), digits = 2)
Avg_Temp
HS_MwM <- cbind(HS_M, Avg_Temp)
HS_MwM
Avg_T <- round(rowMeans(HS_M), digits = 2)
Avg_T
HS_MwM <- cbind(HS_M, Avg_T)
HS_MwM
library("tidyverse")
Sex <- c("Male", "Female", "Male")
Length <- c(3.2, 3.7, 3.4)
Weight <- c(2.9, 4.0, 3.1)
hbirds <- data.frame(Sex, Length, Weight)
hbirds
names(hbirds)
hbirds <- data.frame(sex = Sex,length_in = Length, weight_oz = Weight)
names(hbirds)
hbirds
hbirds[1,]
hbirds[,3]
w <- hbirds$weight_oz
mean(w)
summary(hbirds)
glimpse(hbirds)
new_bird <- c("Female", 3.6, 3.9)
new_bird
hbirds<- rbind(hbirds, new_bird)
hbirds
hbirds$neighborhood <- c("Lakewood", "Brentwood", "Lakewood", "Scenic Heights")
hbirds
class(hbirds$neighborhood)
hbirds$neighborhood <- as.factor(hbirds$neighborhood)
class(hbirds$neighborhood)
levels(hbirds$neighborhood)
write.csv(hbirds, "hbirds_data.csv", row.names = FALSE)
temp <- c(36.25, 35.40, 35.30, 35.15, 35.35, 33.35, 30.70, 29.65, 29.20)
name <- c("Jill","Susan", "Steve", "Jill","Susan", "Steve", "Jill","Susan", "Steve")
spring <- c("Buckeye", "Buckeye", "Buckeye", "Benton", "Benton", "Benton", "Travertine", "Travertine", "Travertine")
hsprings <- data.frame(name, spring, temp)
hsprings
HS <- data.frame(Scientist = name, , )
HS <- data.frame(Scientist = name)
hsprings <- data.frame(Scientist = name)
hsprings
hsprings <- data.frame(name, spring, temp)
hsprings
hsprings <- data.frame(Scientist = name, spring = spring, temp = temp)
hsprings
hsprings <- data.frame(name, spring, temp)
hsprings
hsprings <- data.frame(scientist = name, spring = spring, temp = temp)
hsprings
hsprings$depth_ft <- c(4.15, 4.13, 4.12, 3.21, 3.23, 3.20, 5.67, 5.65, 5.66)
hsprings
mean_temp <- mean(hsprings$temp)
mean_temp
class(scientist)
class(hsprings$scientist)
levels(hsprings$scientist)
write.csv(hotsprings, hotsprings_data.csv, row.names = false)
write.csv(hotsprings, hotsprings_data.csv, row.names = FALSE)
write.csv(hsprings, hotsprings_data.csv, row.names = FALSE)
write.csv(hsprings, "hotsprings_data.csv", row.names = FALSE)
library("tidyverse")
msleep
?msleep
sleep <- msleep
sleep <- msleep
sleep
colnames(sleep)
glimpse(sleep)
summary(sleep)
library("tidyverse")
install.packages(c("rmarkdown", "stringi"))
library("tidyverse")
library("tidyverse")
msleep
?msleep #From National Academy of Sciences, 104 (3):1051-1056, 2007.
sleep <- msleep
sleep
colnames(sleep)
glimpse(sleep)
summary(sleep)
print(sleep( , 1))
sleep[1, ]
sleep[1, ]
sleep[ ,1]
print(sleep[1, ])
sleep[ ,1]
sleep[1, ]
sleep[ ,1]
7. We are interested in two groups; small and large mammals. Let's define small as less than or equal to 1kg body weight and large as greater than or equal to 200kg body weight. Make two new dataframes (large and small) based on these parameters.
```{r}
s_mammal <- data.frame(ifelse)
l_mammal
```
?ifelse
s_mammal <- data.frame(ifelse(sleep$bodywt>1,sleep, ))
s_mammal <- data.frame(ifelse(sleep$bodywt>1, sleep, ))
7. We are interested in two groups; small and large mammals. Let's define small as less than or equal to 1kg body weight and large as greater than or equal to 200kg body weight. Make two new dataframes (large and small) based on these parameters.
```{r}
s_mammal <-
l_mammal
```
?data.frame
7. We are interested in two groups; small and large mammals. Let's define small as less than or equal to 1kg body weight and large as greater than or equal to 200kg body weight. Make two new dataframes (large and small) based on these parameters.
```{r}
s_mammal <-
l_mammal
```
?dataframe
?split
7. We are interested in two groups; small and large mammals. Let's define small as less than or equal to 1kg body weight and large as greater than or equal to 200kg body weight. Make two new dataframes (large and small) based on these parameters.
```{r}
s_mammal <-
l_mammal
```
?dataframe
?daply
s_mammal <- data[sleep$bodywt <= 1]
s_mammal <- data[sleep$bodywt =< 1]
s_mammal <- data[sleep$bodywt <= 1]
7. We are interested in two groups; small and large mammals. Let's define small as less than or equal to 1kg body weight and large as greater than or equal to 200kg body weight. Make two new dataframes (large and small) based on these parameters.
```{r}
s_mammal <-
```
?subset
s_mammal <- subset(sleep, bodywt <= 1)
View(sleep)
s_mammal <- subset(sleep, bodywt <= 1)
l_mammal <- subset(sleep, bodywt >= 200)
s_mammal <- subset(sleep, bodywt <= 1)
s_mammal
l_mammal <- subset(sleep, bodywt >= 200)
l_mammal
mean(s_mammal$bodywt)
mean(l_mammal$bodywt)
mean(s_mammal$bodywt)
mw_l_mammal <- mean(l_mammal$bodywt)
mw_l_mammal
mw_s_mammal <- mean(s_mammal$bodywt)
mw_s_mammal
mw_l <- mean(l_mammal$bodywt)
mw_l
mw_s <- mean(s_mammal$bodywt)
mw_s
sleep_l <- mean(sleep$sleep_total)
sleep_l
sleep_l <- mean(l_mammal$sleep_total)
sleep_l
sleep_s <- mean(s_mammal$sleep_total)
sleep_s
11. Which animals are the sleepiest? Which sleep least 18 hours per day?
```{r}
if sleep_s >
```
?if
()
if (sleep_s>sleep_l) print("Small") else if (sleep_s<sleep_l) print("large") else print("Small and Large Same")
if (sleep_s>sleep_l) print("Small") else if (sleep_s<sleep_l) print("large") else print("Small and Large Same")
Mega_Sleep <- subset(sleep, sleep_total >= 18, name)
if (sleep_s>sleep_l) print("Small") else if (sleep_s<sleep_l) print("large") else print("Small and Large Same")
Mega_Sleep <- subset(sleep, sleep_total >= 18, name)
Mega_Sleep
if (sleep_s>sleep_l) print("Small") else if (sleep_s<sleep_l) print("large") else print("Small and Large Same")
Mega_Sleep <- subset(sleep, sleep_total >= 18, select = c(name, genus, order, sleep_total)
Mega_Sleep
if (sleep_s>sleep_l) print("Small") else if (sleep_s<sleep_l) print("large") else print("Small and Large Same")
Mega_Sleep <- subset(sleep, sleep_total >= 18, select = c(name, genus, order, sleep_total))
Mega_Sleep
