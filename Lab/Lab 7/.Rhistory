knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library("tidyverse")
library("shiny")
library("naniar")
install.packages("shinydashboard")
library("tidyverse")
library("shiny")
library("naniar")
#install.packages("shinydashboard")
library("shinydashboard")
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width"),
selected = "Petal.Width"),
selectInput("y", "Select Y Variable", choices = c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width"),
selected = "Petal.Length"),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
ggplot(iris, aes_string(x = input$x, y = input$y, col = "Species")) + geom_point() + theme_light(base_size = 18)
})
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width"),
selected = "Petal.Width"),
selectInput("y", "Select Y Variable", choices = c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width"),
selected = "Petal.Length"),
sliderInput("fontsize", "Select the Font Size", min = 10, max = 24, value = 18, step = 1),
plotOutput("plot", width = "500px", height = "400px")
)
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(iris, aes_string(x = input$x, y = input$y, col = "Species")) + geom_point() + theme_light(base_size = input$fontsize)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Plot Iris App"),
dashboardSidebar(),
dashboardBody()
)
server <- function(input, output) { }
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Plot Iris App"),
dashboardSidebar(),
dashboardBody(
selectInput("x", "Select X Variable", choices = c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width"),
selected = "Petal.Width"),
selectInput("y", "Select Y Variable", choices = c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width"),
selected = "Petal.Length"),
sliderInput("pointsize", "Select the Point Size", min = 1, max = 5, value = 2, step = 0.5),
plotOutput("plot", width = "500px", height = "400px"))
)
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(iris, aes_string(x = input$x, y = input$y, col = "Species")) + geom_point(size=input$pointsize) + theme_light(base_size = 18)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <-
dashboardPage(
dashboardHeader(title = "Plot Iris App"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(
selectInput("x", "Select X Variable", choices = c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width"),
selected = "Petal.Width"),
selectInput("y", "Select Y Variable", choices = c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width"),
selected = "Petal.Length"),
sliderInput("pointsize", "Select the Point Size", min = 1, max = 5, value = 2, step = 0.5)
), # close the first box
box(
plotOutput("plot", width = "500px", height = "400px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(iris, aes_string(x = input$x, y = input$y, col = "Species")) + geom_point(size=input$pointsize) + theme_light(base_size = 18)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
gabon <- readr::read_csv("data/IvindoData_DryadVersion.csv")
glimpse(gabon)
ui <- dashboardPage(
dashboardHeader(title = "Relative Abundance by Taxonomic Guilds"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("z", "Select Taxonomic Group", choices = c("RA_Birds", "RA_Monkeys", "RA_Apes", "RA_Elephant", "RA_Ungulate", "RA_Rodent"),
selected = "RA_Bird"),
), # close the first box
box(title = "Plot of RA Data", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(gabon, aes_string(x = "Distance", y = input$z)) + geom_point() + theme_light(base_size = 18)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Relative Abundance by Taxonomic Guilds"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("z", "Select Taxonomic Group", choices = c("RA_Birds", "RA_Monkeys", "RA_Apes", "RA_Elephant", "RA_Ungulate", "RA_Rodent"),
selected = "RA_Bird"),
), # close the first box
box(title = "Plot of RA Data", width = 7,
plotOutput("plot", width = "600px", height = "200px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(gabon, aes_string(x = "Distance", y = input$z)) + geom_point() + theme_light(base_size = 18)+geom_smooth(se=T)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Relative Abundance by Taxonomic Guilds"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("z", "Select Taxonomic Group", choices = c("RA_Birds", "RA_Monkeys", "RA_Apes", "RA_Elephant", "RA_Ungulate", "RA_Rodent"),
selected = "RA_Bird"),
), # close the first box
box(title = "Plot of RA Data", width = 7,
plotOutput("plot", width = "600px", height = "400px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(gabon, aes_string(x = "Distance", y = input$z)) + geom_point() + theme_light(base_size = 18)+geom_smooth(se=T)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Relative Abundance by Taxonomic Guilds"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("z", "Select Taxonomic Group", choices = c("RA_Birds", "RA_Monkeys", "RA_Apes", "RA_Elephant", "RA_Ungulate", "RA_Rodent"),
selected = "RA_Bird"),
), # close the first box
box(title = "Plot of RA Data", width = 7,
plotOutput("plot", width = "600px", height = "400px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(gabon, aes_string(x = "Distance", y = input$z)) + geom_point() + theme_light(base_size = 18)+geom_smooth(method=lm, se=T)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Relative Abundance by Taxonomic Guilds"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("z", "Select Taxonomic Group", choices = c("RA_Birds", "RA_Monkeys", "RA_Apes", "RA_Elephant", "RA_Ungulate", "RA_Rodent"),
selected = "RA_Bird"),
), # close the first box
box(title = "Plot of RA Data", width = 7,
plotOutput("plot", width = "600px", height = "400px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(gabon, aes_string(x = "Distance", y = input$z)) + geom_point(size=5) + theme_light(base_size = 18)+geom_smooth(method=lm, se=T)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
install.packages("shinydashboard")
